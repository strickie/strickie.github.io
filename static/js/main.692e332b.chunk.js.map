{"version":3,"sources":["components/NavMenu.js","components/Layout.js","components/Home.js","components/FetchData.js","components/Famly.tsx","components/Counter.js","App.tsx","registerServiceWorker.js","index.js"],"names":["NavMenu","props","toggleNavbar","bind","state","collapsed","this","setState","className","bg","variant","tag","Link","to","onClick","isOpen","navbar","Component","displayName","name","Layout","children","Home","href","React","FetchData","forecasts","loading","populateWeatherData","contents","renderForecastsTable","id","fetch","response","json","data","aria-labelledby","map","forecast","key","date","temperatureC","temperatureF","summary","Famly","accessToken","email","password","error","errorDesc","handleChange","handleSubmit","e","target","value","event","famlyLogin","preventDefault","Form","onSubmit","Group","controlId","Label","InputGroup","Prepend","Text","Control","type","placeholder","required","onChange","text","onCopy","copied","Append","icon","Alert","show","Button","method","headers","body","JSON","stringify","ok","status","statusText","Counter","currentCount","incrementCounter","aria-live","App","exact","path","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","baseUrl","document","getElementsByTagName","getAttribute","rootElement","getElementById","ReactDOM","render","BrowserRouter","basename","URL","process","origin","addEventListener","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.692e332b.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Collapse, Container, Navbar, NavbarBrand, NavbarToggler, NavItem, NavLink } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport './NavMenu.css';\r\n\r\nexport class NavMenu extends Component {\r\n  static displayName = NavMenu.name;\r\n\r\n  constructor (props) {\r\n    super(props);\r\n\r\n    this.toggleNavbar = this.toggleNavbar.bind(this);\r\n    this.state = {\r\n      collapsed: true\r\n    };\r\n  }\r\n\r\n  toggleNavbar () {\r\n    this.setState({\r\n      collapsed: !this.state.collapsed\r\n    });\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <header>\r\n          <Navbar className=\"navbar-expand-sm navbar-toggleable-sm border-bottom box-shadow mb-3\" bg=\"dark\" variant=\"dark\">\r\n          <Container>\r\n            <NavbarBrand tag={Link} to=\"/\">Famly++</NavbarBrand>\r\n            <NavbarToggler onClick={this.toggleNavbar} className=\"mr-2\" />\r\n            <Collapse className=\"d-sm-inline-flex flex-sm-row-reverse\" isOpen={!this.state.collapsed} navbar>\r\n              <ul className=\"navbar-nav flex-grow\">\r\n                <NavItem>\r\n                  <NavLink tag={Link} className=\"text-dark\" to=\"/\">Home</NavLink>\r\n                </NavItem>\r\n                <NavItem>\r\n                  <NavLink tag={Link} className=\"text-dark\" to=\"/counter\">FamlyPhoto</NavLink>\r\n                </NavItem>\r\n                <NavItem>\r\n                  <NavLink tag={Link} className=\"text-dark\" to=\"/famly\">FamlyCal</NavLink>\r\n                </NavItem>\r\n              </ul>\r\n            </Collapse>\r\n          </Container>\r\n        </Navbar>\r\n      </header>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Container } from 'reactstrap';\r\nimport { NavMenu } from './NavMenu';\r\n\r\nexport class Layout extends Component {\r\n  static displayName = Layout.name;\r\n\r\n  render () {\r\n    return (\r\n      <div>\r\n        <NavMenu />\r\n        <Container>\r\n          {this.props.children}\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import * as React from \"react\";\r\n\r\nexport class Home extends React.Component {\r\n  static displayName = Home.name;\r\n\r\n  render () {\r\n    return (\r\n      <div>\r\n        <h1>Hello, world!</h1>\r\n        <p>Welcome to your new single-page application, built with:</p>\r\n        <ul>\r\n          <li><a href='https://get.asp.net/'>ASP.NET Core</a> and <a href='https://msdn.microsoft.com/en-us/library/67ef8sbd.aspx'>C#</a> for cross-platform server-side code</li>\r\n          <li><a href='https://facebook.github.io/react/'>React</a> for client-side code</li>\r\n          <li><a href='http://getbootstrap.com/'>Bootstrap</a> for layout and styling</li>\r\n        </ul>\r\n        <p>To help you get started, we have also set up:</p>\r\n        <ul>\r\n          <li><strong>Client-side navigation</strong>. For example, click <em>Counter</em> then <em>Back</em> to return here.</li>\r\n          <li><strong>Development server integration</strong>. In development mode, the development server from <code>create-react-app</code> runs in the background automatically, so your client-side resources are dynamically built on demand and the page refreshes when you modify any file.</li>\r\n          <li><strong>Efficient production builds</strong>. In production mode, development-time features are disabled, and your <code>dotnet publish</code> configuration produces minified, efficiently bundled JavaScript files.</li>\r\n        </ul>\r\n        <p>The <code>ClientApp</code> subdirectory is a standard React application based on the <code>create-react-app</code> template. If you open a command prompt in that directory, you can run <code>npm</code> commands such as <code>npm test</code> or <code>npm install</code>.</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import * as React from \"react\";\r\n\r\nexport class FetchData extends React.Component {\r\n  static displayName = FetchData.name;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { forecasts: [], loading: true };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.populateWeatherData();\r\n  }\r\n\r\n  static renderForecastsTable(forecasts) {\r\n    return (\r\n      <table className='table table-striped' aria-labelledby=\"tabelLabel\">\r\n        <thead>\r\n          <tr>\r\n            <th>Date</th>\r\n            <th>Temp. (C)</th>\r\n            <th>Temp. (F)</th>\r\n            <th>Summary</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {forecasts.map(forecast =>\r\n            <tr key={forecast.date}>\r\n              <td>{forecast.date}</td>\r\n              <td>{forecast.temperatureC}</td>\r\n              <td>{forecast.temperatureF}</td>\r\n              <td>{forecast.summary}</td>\r\n            </tr>\r\n          )}\r\n        </tbody>\r\n      </table>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    let contents = this.state.loading\r\n      ? <p><em>Loading...</em></p>\r\n      : FetchData.renderForecastsTable(this.state.forecasts);\r\n\r\n    return (\r\n      <div>\r\n        <h1 id=\"tabelLabel\" >Weather forecast</h1>\r\n        <p>This component demonstrates fetching data from the server.</p>\r\n        {contents}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  async populateWeatherData() {\r\n    const response = await fetch('weatherforecast');\r\n    const data = await response.json();\r\n    this.setState({ forecasts: data, loading: false });\r\n  }\r\n}\r\n","import * as React from \"react\";\r\nimport { Form, Button, InputGroup, Alert } from 'react-bootstrap';\r\nimport * as CopyToClipboard from 'react-copy-to-clipboard';\r\nimport { MDBIcon } from 'mdbreact';\r\n\r\nexport class Famly extends React.Component {\r\n    readonly state = {\r\n        loading: true,\r\n        accessToken: \"\",\r\n        email: \"\",\r\n        password: \"\",\r\n        error: false,\r\n        errorDesc: \"\"\r\n    };\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        \r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChange(e: any) {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    }\r\n\r\n    handleSubmit(event: any) {\r\n        this.famlyLogin(this.state.email, this.state.password);\r\n        event.preventDefault();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Form onSubmit={this.handleSubmit}>\r\n                <Form.Group controlId=\"email\">\r\n                    <Form.Label>E-mail adresse</Form.Label>\r\n                    <InputGroup>\r\n                        <InputGroup.Prepend>\r\n                            <InputGroup.Text>@</InputGroup.Text>\r\n                        </InputGroup.Prepend>\r\n                        <Form.Control type=\"email\"\r\n                            name=\"email\"\r\n                            placeholder=\"E-mail\"\r\n                            required\r\n                            onChange={this.handleChange.bind(this)}\r\n                        />\r\n                    </InputGroup>\r\n                    <Form.Text className=\"text-muted\">\r\n                       Vi deler ikke din e-mail med nogen andre.\r\n                    </Form.Text>\r\n                </Form.Group>\r\n                <Form.Group controlId=\"password\">\r\n                    <Form.Label>Adgangskode</Form.Label>\r\n                    <Form.Control\r\n                        type=\"password\"\r\n                        name=\"password\"\r\n                        required\r\n                        placeholder=\"Password\"\r\n                        onChange={this.handleChange.bind(this)}\r\n                    />\r\n                    <Form.Text className=\"text-muted\">\r\n                        Din adgangskode bliver kun sendt fra din browser direkte til Famlys server.\r\n                    </Form.Text>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"url\">\r\n                    <Form.Label>Kalender Url</Form.Label>\r\n                    <CopyToClipboard.default text={this.state.accessToken ? `https://famly.microservice.dk/calendar/${this.state.accessToken}` : ''}\r\n                        onCopy={() => this.setState({ copied: true })}>\r\n                        <InputGroup>\r\n                            <Form.Control type=\"text\"\r\n                                placeholder=\"Kalender Url\"\r\n                                value={this.state.accessToken ? `https://famly.microservice.dk/calendar/${this.state.accessToken}` : ''}\r\n                            />\r\n                            <InputGroup.Append>\r\n                                <InputGroup.Text>\r\n                                    <MDBIcon icon=\"copy\" />\r\n                                </InputGroup.Text>\r\n                            </InputGroup.Append>\r\n                        </InputGroup>\r\n                    </CopyToClipboard.default>\r\n                </Form.Group>\r\n\r\n                <Alert variant=\"danger\" show={this.state.error}>\r\n                    {this.state.errorDesc}\r\n                </Alert>\r\n\r\n                <Button variant=\"primary\" type=\"submit\">\r\n                    Submit\r\n                </Button>\r\n            </Form>);\r\n    }\r\n\r\n    async famlyLogin(email: string, password: string) {\r\n        const response = await fetch('https://app.famly.co/api/login/login/authenticate',\r\n            {\r\n                method: 'post',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({\r\n                    \"email\": email,\r\n                    \"password\": password,\r\n                    \"deviceId\": \"Cheese?\",\r\n                    \"locale\": \"da-DK\"\r\n                })\r\n            });\r\n\r\n        const data = await response.json();\r\n\r\n        if (response.ok) {\r\n            this.setState({ error: false, accessToken: data.accessToken });\r\n        }\r\n        else {\r\n            this.setState({ error: true, errorDesc: `${response.status} - ${response.statusText} - ${data.error}` });\r\n        }\r\n    }\r\n}\r\n","import * as React from \"react\";\r\n\r\nexport class Counter extends React.Component {\r\n  static displayName = Counter.name;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { currentCount: 0 };\r\n    this.incrementCounter = this.incrementCounter.bind(this);\r\n  }\r\n\r\n  incrementCounter() {\r\n    this.setState({\r\n      currentCount: this.state.currentCount + 1\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Counter</h1>\r\n\r\n        <p>This is a simple example of a React component.</p>\r\n\r\n        <p aria-live=\"polite\">Current count: <strong>{this.state.currentCount}</strong></p>\r\n\r\n        <button className=\"btn btn-primary\" onClick={this.incrementCounter}>Increment</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Route } from 'react-router';\r\nimport { Layout } from './components/Layout';\r\nimport { Home } from './components/Home';\r\nimport { FetchData } from './components/FetchData';\r\nimport { Famly } from './components/Famly';\r\nimport { Counter } from './components/Counter';\r\n\r\nimport './custom.css'\r\n\r\nexport default class App extends Component {\r\n  static displayName = App.name;\r\n\r\n  render () {\r\n    return (\r\n      <Layout>\r\n        <Route exact path='/' component={Home} />\r\n        <Route path='/counter' component={Counter} />\r\n        <Route path='/fetch-data' component={FetchData} />\r\n        <Route path='/famly' component={Famly} />\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === '[::1]' ||\r\n  // 127.0.0.1/8 is considered localhost for IPv4.\r\n  window.location.hostname.match(\r\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n  )\r\n);\r\n\r\nexport default function register () {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW (swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker (swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister () {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import 'bootstrap/dist/css/bootstrap.css';\r\nimport '@fortawesome/fontawesome-free/css/all.min.css';\r\nimport 'mdbreact/dist/css/mdb.css';\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nconst baseUrl = document.getElementsByTagName('base')[0].getAttribute('href');\r\nconst rootElement = document.getElementById('root');\r\n\r\nReactDOM.render(\r\n  <BrowserRouter basename={baseUrl}>\r\n    <App />\r\n  </BrowserRouter>,\r\n  rootElement);\r\n\r\nregisterServiceWorker();\r\n\r\n"],"sourceRoot":""}